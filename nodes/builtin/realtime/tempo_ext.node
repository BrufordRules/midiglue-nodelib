<Comment>
Copyright (c) 2018-2020, sigboost, inc., All Rights Reserved.
This file is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license.

<I/O>
input Int : Sync bang input
input Int : Set start(2)/continue(1)/stop(0)
input Any : Trigger reset
input Int : Set PPQN
output Float : Current BPM

<Description>
Set master tempo with external sync signal.
All nodes that use tick as the timing base relies on master tempo.
If this node is placed in a flow, master tempo is controlled by this node.
Available operations are:
- Input external sync signal: ticks are counted up in synchronization with the signal.
- Set status:
  - start: Reset tick count and start counting up ticks
  - continue: Resume counting up ticks without resetting tick count
  - stop: Stop tick count without resetting tick count
- Trigger reset: Reset tick count
- Set PPQN: Set PPQN (Pulses per quarter note) of the incoming sync signal

If the input signal disappears, ticks continue to count up with the current tempo.

<Parameter>
parameter PPQN = 1 : PPQN of the input sync signal
parameter State = ["Start", "Continue", "Stop"] : Initial state (start(2)/continue(1)/stop(0))

<Setup>
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>
static Midiglue::ClockState state = Midiglue::ClockState::${State};
if(@in0){
    Midiglue::countup_tick();
    if (state != Midiglue::ClockState::Stop)
        out0 = Midiglue::get_bpm();
}else if (@in1){
    if (in1 == static_cast<Int>(Midiglue::ClockState::Start)){
        state = Midiglue::ClockState::Start;
        Midiglue::reset_tick(Midiglue::TPQN);
        Midiglue::start_tick(false);
    }else if (in1 == static_cast<Int>(Midiglue::ClockState::Continue)){
        state = Midiglue::ClockState::Continue;
        Midiglue::start_tick(false);
    }else if (in1 == static_cast<Int>(Midiglue::ClockState::Stop)){
        state = Midiglue::ClockState::Stop;
        Midiglue::stop_tick();
    }
}else if (@in2){
    Midiglue::reset_tick(Midiglue::TPQN);
}else if (@in3){
    if (in3 != 0){
        Midiglue::set_tick_per_count(Midiglue::TPQN / in3);
    }
}else if (@setup){
    Midiglue::init_tick_manager();
    if (${PPQN} != 0)
        Midiglue::set_tick_per_count(Midiglue::TPQN / ${PPQN});
    if (state != Midiglue::ClockState::Stop) {
        Midiglue::start_tick(true);
    }
}
