<Comment>
Copyright (c) 2018-2020, sigboost, inc., All Rights Reserved.
This file is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license.

<I/O>
input MidiPacket : MIDI notes to quantize
input MidiPacket : MIDI notes to determine chord scale
input Int : Set root (0-11)
input Int : Index of built-in musical scale
output MidiPacket : Scale quantized MIDI Notes
output String : Scale name

<Description>
Determines the chord scale from the input chord and quantized another MIDI note using that scale.
Code scale estimation is currently a beta feature.

<Parameter>
parameter Channel = 0 : MIDI channel for chord input. 0 = do not care.
parameter Hold = true : Hold chord notes.
parameter ChordToneOnly = false : Quantize only with chord tones.

<Setup>
${this}( &(Midiglue::__bang), Midiglue::SETUP );

<Code>
static Int ch = ${Channel};
static std::set<uint8_t> chord_notes;
static int chord_notes_cnt = 0;
static Music::Scale::ScaleTones tones;
static ActiveNoteTracker tracker;
static std::string scale_name;
if (@in0){
    if (in0.isNoteOn()){
        auto packet = tracker.noteon(in0, in0.getChannel(), std::clamp(int(tones.quantize(in0.getNoteNumber())), 0, 127));
        out0 = packet;
    }else if (in0.isNoteOff()){
        auto packet = tracker.noteoff(in0);
        if (Midiglue::is_valid(packet)){
            out0 = packet;
        }
    }
}else if (@in1){
    if (in1.isNote() && (ch==0 || in1.getChannel()==ch)){
        if (in1.isNoteOn()){
            if (${Hold} && chord_notes_cnt <= 0){
                chord_notes.clear();
                chord_notes_cnt = 0;
            }
            chord_notes.insert(in1.getNoteNumber());
            chord_notes_cnt++;
        }else{
            if (${Hold}){
                chord_notes_cnt--;
            }else{
                chord_notes.erase(in1.getNoteNumber());
            }
        }
        if (${ChordToneOnly}){
            tones.from_chord_tones(chord_notes);
        }else{
            scale_name = tones.from_chord_scale(chord_notes);
            out1 = Midiglue::make_string( Music::Pitch::name(tones.get_root()) + " " + scale_name);
        }
    }
}else if (@in2){
    tones.set_root(std::clamp(in2, 0, 11));
    out1 = Midiglue::make_string( Music::Pitch::name(tones.get_root()) + " " + scale_name);
}else if (@in3){
    int index = std::clamp(in3, 0, (int)Music::Scale::musical_scales_size-1);
    tones.from_named_scale(Music::Scale::musical_scales[index]);
    scale_name = Music::Scale::musical_scales[index].short_name;
    out1 = Midiglue::make_string( Music::Pitch::name(tones.get_root()) + " " + scale_name);
}
